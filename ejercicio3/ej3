#include <opencv2/imgproc/imgproc.hpp>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <iostream>
#include <queue>
#include<vector>


using namespace cv;
using namespace std;
int main(){
    Mat image;
    
    image = imread("image.jpg", IMREAD_GRAYSCALE);
    image.convertTo(image, CV_8UC1);
    if (image.size().width <= 0 && image.size().height <= 0) {
      cout << "ERROR: Camera returned blank image, check connection\n";
      
    }
    Mat color(image.rows, image.cols, CV_8UC1, Scalar(0));
    
    

    for (int i = 0; i<image.rows; i++)
        for(int j = 0; j<image.cols; j++)
        
            
            if(image.at<uchar>(i, j)>170)
                image.at<uchar>(i, j) = 0xff;
            else
                image.at<uchar>(i, j) = 0;


    int area[3] = {0, 0, 0};

    for(int k = 1; k<4; k++){
        printf("\n");
        int x, y;
        do{
        x = rand()%image.cols;
        y = rand()%image.rows;
        printf("Buscando\n");
        printf("%d, %d", x, y);
        }while(image.at<uchar>(y, x) ==0 || color.at<uchar>(y, x)!=0);
        
        vector<Point> vecinos;
        Point p(0, 1);
        vecinos.push_back(p);
        p.x = -1;
        p.y = 0;
        vecinos.push_back(p);
        p.x = 0;
        p.y = -1;
        vecinos.push_back(p);
        p.x = 1;
        p.y = 0;
        vecinos.push_back(p);

        Point q(x, y);
        queue<Point> lista;
        lista.push(q);
        color.at<uchar>(q) = 255;
        Point punto;
        while(lista.empty()==false){
            area[k-1]++;
            punto.x = lista.front().x;
            punto.y = lista.front().y;
            
            lista.pop();
            for(int i = 0; i<4; i++){
                //printf("agregando vecinos\n");
                if(image.at<uchar>(punto+vecinos[i]) ==255 && color.at<uchar>(punto+vecinos[i])==0){
                    lista.push(punto+vecinos[i]);
                    color.at<uchar>(punto+vecinos[i]) = k*80;
                }
            }

        }
        
    }
    printf("\n%d\t%d\t%d\n", area[0], area[1], area[2]);
    while(1){
        //cout<< image.type()<<endl;
        //printf("%d\t%d\t%d", area[0], area[1], area[2]);
        imshow("Image", color);
        imshow("image2", image);
        
    waitKey(1);}
    return 0;
}